import 'dart:math';

class TetrisBlock {
  //初始化背景图
  static const List<List<int>> block_init = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  ];

  //方块类型及旋转形态
  //第一组代表方块类型 O I T 7 倒7 Z S
  //第二组代表方块旋转状态
  //第三、四组代表方块形状
  static const List<List<List<List<int>>>> block = [
    [
      //O形
      [
        [0, 1, 1, 0],
        [0, 1, 1, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
      ],
      [
        [0, 1, 1, 0],
        [0, 1, 1, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
      ],
      [
        [0, 1, 1, 0],
        [0, 1, 1, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
      ],
      [
        [0, 1, 1, 0],
        [0, 1, 1, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
      ]
    ],
    //I形
    [
      [
        [0, 2, 0, 0],
        [0, 2, 0, 0],
        [0, 2, 0, 0],
        [0, 2, 0, 0]
      ],
      [
        [0, 0, 0, 0],
        [2, 2, 2, 2],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
      ],
      [
        [0, 2, 0, 0],
        [0, 2, 0, 0],
        [0, 2, 0, 0],
        [0, 2, 0, 0]
      ],
      [
        [0, 0, 0, 0],
        [2, 2, 2, 2],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
      ]
    ],
    //T形
    [
      [
        [0, 3, 0, 0],
        [3, 3, 3, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
      ],
      [
        [0, 3, 0, 0],
        [0, 3, 3, 0],
        [0, 3, 0, 0],
        [0, 0, 0, 0]
      ],
      [
        [3, 3, 3, 0],
        [0, 3, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
      ],
      [
        [0, 3, 0, 0],
        [3, 3, 0, 0],
        [0, 3, 0, 0],
        [0, 0, 0, 0]
      ]
    ],
    //7形
    [
      [
        [4, 4, 0, 0],
        [0, 4, 0, 0],
        [0, 4, 0, 0],
        [0, 0, 0, 0]
      ],
      [
        [0, 0, 4, 0],
        [4, 4, 4, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
      ],
      [
        [4, 0, 0, 0],
        [4, 0, 0, 0],
        [4, 4, 0, 0],
        [0, 0, 0, 0]
      ],
      [
        [4, 4, 4, 0],
        [4, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
      ]
    ],
    //倒7形
    [
      [
        [5, 5, 0, 0],
        [5, 0, 0, 0],
        [5, 0, 0, 0],
        [0, 0, 0, 0]
      ],
      [
        [5, 5, 5, 0],
        [0, 0, 5, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
      ],
      [
        [0, 0, 5, 0],
        [0, 0, 5, 0],
        [0, 5, 5, 0],
        [0, 0, 0, 0]
      ],
      [
        [5, 0, 0, 0],
        [5, 5, 5, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
      ]
    ],
    //Z形
    [
      [
        [6, 6, 0, 0],
        [0, 6, 6, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
      ],
      [
        [0, 6, 0, 0],
        [6, 6, 0, 0],
        [6, 0, 0, 0],
        [0, 0, 0, 0]
      ],
      [
        [6, 6, 0, 0],
        [0, 6, 6, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
      ],
      [
        [0, 6, 0, 0],
        [6, 6, 0, 0],
        [6, 0, 0, 0],
        [0, 0, 0, 0]
      ]
    ],
    //S形
    [
      [
        [0, 7, 7, 0],
        [7, 7, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
      ],
      [
        [7, 0, 0, 0],
        [7, 7, 0, 0],
        [0, 7, 0, 0],
        [0, 0, 0, 0]
      ],
      [
        [0, 7, 7, 0],
        [7, 7, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
      ],
      [
        [7, 0, 0, 0],
        [7, 7, 0, 0],
        [0, 7, 0, 0],
        [0, 0, 0, 0]
      ],
    ]
  ];

  //随机生成方块
  static List<List<int>> newBlock() {
    int blockType = Random().nextInt(7) - 1;
    int turnState = Random().nextInt(4) - 1;
    return block[blockType][turnState];
  }
  //左移

  //右移

  //下移

  //变形

}
